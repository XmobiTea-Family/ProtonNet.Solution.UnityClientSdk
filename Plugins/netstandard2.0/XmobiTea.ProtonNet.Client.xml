<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmobiTea.ProtonNet.Client</name>
    </assembly>
    <members>
        <member name="T:XmobiTea.ProtonNet.Client.ClientPeerFactory">
            <summary>
            Factory class to create and manage different types 
            of client peers, including Web API and Socket client peers.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.logger">
            <summary>
            Logger instance for logging activities within the factory.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory._lockClientPeers">
            <summary>
            Lock for clientPeers
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.clientPeers">
            <summary>
            A list containing all the client peers that are managed by the factory.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.BeanContext">
            <summary>
            The context for managing beans and their dependencies.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.InitRequestProviderService">
            <summary>
            Service provider for initializing client peer requests.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.DataConverter">
            <summary>
            Converter for data transformations between different formats.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.RpcProtocolService">
            <summary>
            Service for managing RPC (Remote Procedure Call) protocols.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.EventService">
            <summary>
            Service for handling various events within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.SocketSessionEmitService">
            <summary>
            Service for emitting socket session events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.SocketOperationModelService">
            <summary>
            Service for managing socket operation models.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.DebugSupport">
            <summary>
            Support for debugging within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.UdpClientOptions">
            <summary>
            Options for configuring UDP client connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.TcpClientOptions">
            <summary>
            Options for configuring TCP client connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.SslOptions">
            <summary>
            Ssl options for secure communication in socket connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.WsSslOptions">
            <summary>
            Ssl options specifically for WebSocket communication.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.SendRate">
            <summary>
            The rate at which data is sent, measured in frames per second.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Assemblies">
            <summary>
            The assemblies to find for event service auto create event handler
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.AutoCallService">
            <summary>
            Auto call service on 1 thread
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.autoCallServiceThread">
            <summary>
            Thread handler auto call service
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.#ctor(XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder)">
            <summary>
            Private constructor to initialize ClientPeerFactory
            with the provided builder.
            </summary>
            <param name="builder">Builder instance used to configure the factory.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.SetupAutoCallService">
            <summary>
            Setup AutoCallService when AutoCallService enable
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.SetupSingleton">
            <summary>
            Sets up singleton classes and binds them within the BeanContext.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateSingletonClassesAttribute">
            <summary>
            Scans for classes with SingletonAttribute and creates singletons.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.AutoBindSingletonObjects">
            <summary>
            Automatically binds all singleton objects within the BeanContext.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.NewWebApiClientPeer(System.String)">
            <summary>
            Creates a new Web API client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <returns>A new instance of IWebApiClientPeer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateNewWebApiClientPeer(System.String)">
            <summary>
            Creates a new instance of the IWebApiClientPeer for handling communication 
            with the specified server address using HTTP as the transport protocol.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <returns>A new instance of IWebApiClientPeer for the given server address.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.NewSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol)">
            <summary>
            Creates a new Socket client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="protocol">The transport protocol to use (e.g., TCP, UDP).</param>
            <returns>A new instance of ISocketClientPeer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateNewSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol)">
            <summary>
            Creates a new instance of the ISocketClientPeer for handling communication 
            with the specified server address using the given transport protocol.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="protocol">The transport protocol to use (e.g., TCP or UDP).</param>
            <returns>A new instance of ISocketClientPeer for the given server address and protocol.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.NewSslSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol)">
            <summary>
            Creates a new SSL Socket client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="sslProtocol">The SSL transport protocol to use.</param>
            <returns>A new instance of ISocketClientPeer with SSL enabled.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateNewSslSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol)">
            <summary>
            Creates a new instance of the ISocketClientPeer for handling communication 
            with the specified server address using the given SSL transport protocol.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="sslProtocol">The SSL transport protocol to use (e.g., SSL or WebSocket SSL).</param>
            <returns>A new instance of ISocketClientPeer for the given server address and SSL protocol.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.GetClientPeer(System.Int32)">
            <summary>
            Retrieves a client peer by its client ID.
            </summary>
            <param name="clientId">The ID of the client peer to retrieve.</param>
            <returns>The client peer with the specified ID.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.DestroyClientPeer(System.Int32)">
            <summary>
            Destroys a client peer by its client ID.
            </summary>
            <param name="clientId">The ID of the client peer to destroy.</param>
            <returns>True if the client peer was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Service">
            <summary>
            Services all client peers to ensure proper functioning.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.NewBuilder">
            <summary>
            Creates a new builder for constructing ClientPeerFactory instances.
            </summary>
            <returns>A new instance of the Builder class.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder">
            <summary>
            Builder class for configuring and constructing instances 
            of the ClientPeerFactory.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.BeanContext">
            <summary>
            Bean context for managing dependencies and singleton instances.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.InitRequestProviderService">
            <summary>
            Service provider for initializing client peer requests.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.DataConverter">
            <summary>
            Converter for transforming data between different formats.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.RpcProtocolService">
            <summary>
            Service for managing RPC (Remote Procedure Call) protocols.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.EventService">
            <summary>
            Service for handling various events within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SocketSessionEmitService">
            <summary>
            Service for emitting socket session events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SocketOperationModelService">
            <summary>
            Service for managing socket operation models.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.DebugSupport">
            <summary>
            Support for debugging within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.UdpClientOptions">
            <summary>
            Options for configuring UDP client connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.TcpClientOptions">
            <summary>
            Options for configuring TCP client connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SslOptions">
            <summary>
            Ssl options for secure communication in socket connections.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.WsSslOptions">
            <summary>
            Ssl options specifically for WebSocket communication.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SendRate">
            <summary>
            The rate at which data is sent, measured in frames per second.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.Assemblies">
            <summary>
            The assemblies to find for event service auto create event handler
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.AutoCallService">
            <summary>
            Auto call service in 1 thread
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.#ctor">
            <summary>
            Constructor to restrict direct instantiation.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetBeanContext(XmobiTea.Bean.IBeanContext)">
            <summary>
            Sets the bean context for the builder.
            </summary>
            <param name="beanContext">The IBeanContext to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetInitRequestProviderService(XmobiTea.ProtonNet.Client.Services.IInitRequestProviderService)">
            <summary>
            Sets the init request provider service for the builder.
            </summary>
            <param name="initRequestProviderService">The IInitRequestProviderService to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetDataConverter(XmobiTea.Data.Converter.IDataConverter)">
            <summary>
            Sets the data converter for the builder.
            </summary>
            <param name="dataConverter">The IDataConverter to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetRpcProtocolService(XmobiTea.ProtonNet.Client.Services.IRpcProtocolService)">
            <summary>
            Sets the RPC protocol service for the builder.
            </summary>
            <param name="rpcProtocolService">The IRpcProtocolService to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetEventService(XmobiTea.ProtonNet.Client.Socket.Services.IEventService)">
            <summary>
            Sets the event service for the builder.
            </summary>
            <param name="eventService">The IEventService to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetSocketSessionEmitService(XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService)">
            <summary>
            Sets the socket session emit service for the builder.
            </summary>
            <param name="socketSessionEmitService">The ISocketSessionEmitService to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetSocketOperationModelService(XmobiTea.ProtonNet.Client.Socket.Services.ISocketOperationModelService)">
            <summary>
            Sets the socket operation model service for the builder.
            </summary>
            <param name="socketOperationModelService">The ISocketOperationModelService to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetDebugSupport(XmobiTea.ProtonNet.Client.Supports.IDebugSupport)">
            <summary>
            Sets the debug support for the builder.
            </summary>
            <param name="debugSupport">The IDebugSupport to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetUdpClientOptions(XmobiTea.ProtonNetClient.Options.UdpClientOptions)">
            <summary>
            Sets the UDP client options for the builder.
            </summary>
            <param name="udpClientOptions">The UdpClientOptions to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetTcpClientOptions(XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Sets the TCP client options for the builder.
            </summary>
            <param name="tcpClientOptions">The TcpClientOptions to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetSslOptions(XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Sets the Ssl options for the builder.
            </summary>
            <param name="sslOptions">The sslOptions to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetWsSslOptions(XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Sets the WebSocket Ssl options for the builder.
            </summary>
            <param name="sslOptions">The sslOptions to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetSendRate(System.Int32)">
            <summary>
            Sets the send rate for the builder.
            </summary>
            <param name="sendRate">The send rate to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Sets the assemblies for the builder.
            </summary>
            <param name="assemblies">The assemblies to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.SetAutoCallService(System.Boolean)">
            <summary>
            Sets the auto call service for the builder.
            </summary>
            <param name="autoCallService">The assemblies to set.</param>
            <returns>The current Builder instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.Builder.Build">
            <summary>
            Builds and returns a new instance of ClientPeerFactory.
            </summary>
            <returns>A new ClientPeerFactory instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateUdpClientOptions">
            <summary>
            Creates and returns a new instance of UdpClientOptions.
            This method can be overridden to provide custom UDP client options.
            </summary>
            <returns>A new instance of UdpClientOptions.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateTcpClientOptions">
            <summary>
            Creates and returns a new instance of TcpClientOptions.
            This method can be overridden to provide custom TCP client options.
            </summary>
            <returns>A new instance of TcpClientOptions.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateBeanContext">
            <summary>
            Creates and returns a new instance of IBeanContext.
            This method can be overridden to provide a custom BeanContext.
            </summary>
            <returns>A new instance of IBeanContext.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateInitRequestProviderService">
            <summary>
            Creates and returns a new instance of IInitRequestProviderService.
            This method can be overridden to provide a custom init request provider service.
            </summary>
            <returns>A new instance of IInitRequestProviderService.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateDataConverter">
            <summary>
            Creates and returns a new instance of IDataConverter.
            This method can be overridden to provide a custom data converter.
            </summary>
            <returns>A new instance of IDataConverter.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateDebugSupport">
            <summary>
            Creates and returns a new instance of IDebugSupport.
            This method can be overridden to provide custom debug support.
            </summary>
            <returns>A new instance of IDebugSupport.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateRpcProtocolService">
            <summary>
            Creates and returns a new instance of IRpcProtocolService.
            This method can be overridden to provide a custom RPC protocol service.
            </summary>
            <returns>A new instance of IRpcProtocolService.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateEventService">
            <summary>
            Creates and returns a new instance of IEventService.
            This method can be overridden to provide a custom event service. 
            It also scans for classes that implement IEventHandler and automatically 
            registers them to the event service.
            </summary>
            <returns>A new instance of IEventService.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateSocketSessionEmitService">
            <summary>
            Creates and returns a new instance of ISocketSessionEmitService.
            This method can be overridden to provide a custom socket session emit service.
            </summary>
            <returns>A new instance of ISocketSessionEmitService.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeerFactory.CreateSocketOperationModelService">
            <summary>
            Creates and returns a new instance of ISocketOperationModelService.
            This method can be overridden to provide a custom socket operation model service.
            It also registers handlers for various operation types.
            </summary>
            <returns>A new instance of ISocketOperationModelService.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Helper.Random">
            <summary>
            Provides methods for generating random numbers within specified ranges.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Helper.Random.rd">
            <summary>
            Gets the instance of the random number generator.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Helper.Random.#cctor">
            <summary>
            Static constructor to initialize the random number generator.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Helper.Random.Range(System.Single,System.Single)">
            <summary>
            Generates a random float number within the specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The exclusive upper bound of the random number returned.</param>
            <returns>A single-precision floating point number that is greater than or equal to <paramref name="min"/> and less than <paramref name="max"/>.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Helper.Random.Range(System.Int32,System.Int32)">
            <summary>
            Generates a random integer within the specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The exclusive upper bound of the random number returned.</param>
            <returns>A 32-bit signed integer that is greater than or equal to <paramref name="min"/> and less than <paramref name="max"/>.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.IClientPeer">
            <summary>
            Represents a client peer in the network communication system. 
            Provides methods to send requests, manage connections, and access network statistics.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.GetClientId">
            <summary>
            Gets the unique client ID.
            </summary>
            <returns>The client ID as an integer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.GetPing">
            <summary>
            Gets the current ping (round-trip time) to the server.
            </summary>
            <returns>The ping in milliseconds.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.GetSendRate">
            <summary>
            Gets the rate at which data is sent by this client peer.
            </summary>
            <returns>The send rate in frames per second.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.GetNetworkStatistics">
            <summary>
            Gets the network statistics associated with this client peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNetCommon.INetworkStatistics"/> containing network statistics.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.Send(XmobiTea.ProtonNet.Networking.OperationRequest,System.Action{XmobiTea.ProtonNet.Networking.OperationResponse},XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Sends an operation request to the server with an optional callback for the response.
            </summary>
            <param name="operationRequest">The operation request to send.</param>
            <param name="onResponse">The action to execute when a response is received.</param>
            <param name="sendParameters">Optional parameters for sending the request.</param>
            <param name="timeoutInSeconds">The timeout period in seconds.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.SendAsync(XmobiTea.ProtonNet.Networking.OperationRequest,XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Asynchronously sends an operation request to the server.
            </summary>
            <param name="operationRequest">The operation request to send.</param>
            <param name="sendParameters">Optional parameters for sending the request.</param>
            <param name="timeoutInSeconds">The timeout period in seconds.</param>
            <returns>A Task representing the asynchronous operation, containing the server's response.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.Service">
            <summary>
            Services the client peer, processing any pending tasks or requests.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.SetDebugSupport(XmobiTea.ProtonNet.Client.Supports.IDebugSupport)">
            <summary>
            Sets the debug support for this client peer.
            </summary>
            <param name="debugSupport">The debug support to set.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.SetAuthToken(System.String)">
            <summary>
            Sets the authentication token for this client peer.
            </summary>
            <param name="authToken">The authentication token to set.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeer.SetSendRate(System.Int32)">
            <summary>
            Sets the rate at which data is sent by this client peer.
            </summary>
            <param name="sendRate">The send rate in frames per second.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.ClientPeer">
            <summary>
            Abstract class representing a client peer in the network communication system.
            Handles sending and receiving of operation requests, managing response timings, 
            and providing debug support.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.logPrefix">
            <summary>
            Prefix used in logging messages specific to this client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.logger">
            <summary>
            Logger instance for logging activities within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.totalRequestId">
            <summary>
            Counter for the total number of requests sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer._lockDelayOperationRequestPendings">
            <summary>
            Lock object to synchronize access to pending operation requests.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.delayOperationRequestPendings">
            <summary>
            Queue to store pending operation requests that are delayed.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer._lockWaitingResponseOperationRequestPendings">
            <summary>
            Lock object to synchronize access to waiting response operation requests.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.waitingResponseOperationRequestPendings">
            <summary>
            List of operation requests that are awaiting a response from the server.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer._lockNeedRemoveOperationRequestPendings">
            <summary>
            Lock object to synchronize access to operation requests that need to be removed.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.needRemoveOperationRequestPendings">
            <summary>
            List of operation requests that need to be removed after processing.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.debugSupport">
            <summary>
            Debug support instance for logging and monitoring operations.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer._lockExecuteTimerInMsQueue">
            <summary>
            Lock object to synchronize access to the timer queue.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.executeTimerInMsQueue">
            <summary>
            Queue to store execution times in milliseconds.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.currentPing">
            <summary>
            Stores the current ping (round-trip time) to the server.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.updateInterval">
            <summary>
            Interval at which updates are sent, in seconds.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.ClientPeer.nextSendTickCount">
            <summary>
            Tick count for the next send operation.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.authToken">
            <summary>
            Authentication token used for server communication.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.serverAddress">
            <summary>
            Address of the server to which this client peer is connected.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.sessionId">
            <summary>
            Session ID for the current connection session.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.clientId">
            <summary>
            Unique client ID assigned to this client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.rpcProtocolService">
            <summary>
            RPC protocol service used by this client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.ClientPeer.tcpClientOptions">
            <summary>
            Options for configuring TCP client connections.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.ClientPeer"/> class.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="initRequest">The initial request containing session and client ID information.</param>
            <param name="tcpClientOptions">Options for configuring the TCP client.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.GetNetworkStatistics">
            <summary>
            Abstract method to retrieve network statistics for the client peer.
            Must be implemented by derived classes.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNetCommon.INetworkStatistics"/> containing network statistics.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.GetClientId">
            <summary>
            Gets the unique client ID for this client peer.
            </summary>
            <returns>The client ID as an integer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.GetPing">
            <summary>
            Gets the current ping (round-trip time) to the server.
            </summary>
            <returns>The ping in milliseconds.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.GetSendRate">
            <summary>
            Gets the rate at which data is sent by this client peer.
            </summary>
            <returns>The send rate in frames per second.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SetSendRate(System.Int32)">
            <summary>
            Sets the rate at which data is sent by this client peer.
            </summary>
            <param name="sendRate">The send rate in frames per second.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.GetAveragePing">
            <summary>
            Calculates the average ping time based on recent execution times.
            </summary>
            <returns>The average ping in milliseconds.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.CheckWaitingResponseOperationRequestPending">
            <summary>
            Checks for operation requests that are waiting for a response and processes them.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.CheckNeedRemoveOperationRequestPending">
            <summary>
            Checks and removes operation requests that have been processed.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SendDelayOperationRequestPending">
            <summary>
            Sends any delayed operation requests when the appropriate time has elapsed.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.Send(XmobiTea.ProtonNet.Networking.OperationRequest,System.Action{XmobiTea.ProtonNet.Networking.OperationResponse},XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Sends an operation request to the server.
            </summary>
            <param name="operationRequest">The operation request to send.</param>
            <param name="onOperationResponse">Callback for handling the server's response.</param>
            <param name="sendParameters">Parameters for sending the request.</param>
            <param name="timeoutInSeconds">Timeout for the request in seconds.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SendAsync(XmobiTea.ProtonNet.Networking.OperationRequest,XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Asynchronously sends an operation request to the server.
            </summary>
            <param name="operationRequest">The operation request to send.</param>
            <param name="sendParameters">Parameters for sending the request.</param>
            <param name="timeoutInSeconds">Timeout for the request in seconds.</param>
            <returns>A Task representing the asynchronous operation, containing the server's response.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.Enqueue(XmobiTea.ProtonNet.Networking.OperationRequest,System.Action{XmobiTea.ProtonNet.Networking.OperationResponse},XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Enqueues an operation request for sending.
            </summary>
            <param name="operationRequest">The operation request to enqueue.</param>
            <param name="onOperationResponse">Callback for handling the server's response.</param>
            <param name="sendParameters">Parameters for sending the request.</param>
            <param name="timeoutInSeconds">Timeout for the request in seconds.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.AddWaitingResponseOperationRequestPending(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Adds an operation request to the list of those waiting for a response.
            </summary>
            <param name="operationRequestPending">The operation request to add.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.CreateNewOperationRequestPending(XmobiTea.ProtonNet.Networking.OperationRequest,System.Action{XmobiTea.ProtonNet.Networking.OperationResponse},XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:XmobiTea.ProtonNet.Client.Models.OperationRequestPending"/> for the given operation request.
            </summary>
            <param name="operationRequest">The operation request to process.</param>
            <param name="onOperationResponse">Callback for handling the server's response.</param>
            <param name="sendParameters">Parameters for sending the request.</param>
            <param name="timeoutInSeconds">Timeout for the request in seconds.</param>
            <returns>A new instance of OperationRequestPending.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.IsConnected">
            <summary>
            Determines whether the client peer is currently connected.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.Service">
            <summary>
            Services the client peer, processing any pending tasks or requests.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SendOperation(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Abstract method to send an operation request to the server.
            Must be implemented by derived classes.
            </summary>
            <param name="operationRequestPending">The pending operation request to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SetDebugSupport(XmobiTea.ProtonNet.Client.Supports.IDebugSupport)">
            <summary>
            Sets the debug support for this client peer.
            </summary>
            <param name="debugSupport">The debug support to set.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.LogEnqueue(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Logs the enqueuing of an operation request.
            </summary>
            <param name="operationRequestPending">The pending operation request to log.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.LogSend(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Logs the sending of an operation request.
            </summary>
            <param name="operationRequestPending">The pending operation request to log.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.LogRecv(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Logs the reception of an operation response.
            </summary>
            <param name="operationRequestPending">The pending operation request to log.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.ClientPeer.SetAuthToken(System.String)">
            <summary>
            Sets the authentication token for this client peer.
            </summary>
            <param name="authToken">The authentication token to set.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.IClientPeerFactory">
            <summary>
            Interface for a factory that creates and manages various types of client peers.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.NewWebApiClientPeer(System.String)">
            <summary>
            Creates a new Web API client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.WebApi.IWebApiClientPeer"/> representing the Web API client peer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.NewSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol)">
            <summary>
            Creates a new Socket client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="protocol">The transport protocol to use (e.g., TCP, UDP).</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer"/> representing the Socket client peer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.NewSslSocketClientPeer(System.String,XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol)">
            <summary>
            Creates a new SSL Socket client peer.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="protocol">The SSL transport protocol to use.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer"/> representing the SSL Socket client peer.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.GetClientPeer(System.Int32)">
            <summary>
            Retrieves a client peer by its client ID.
            </summary>
            <param name="clientId">The ID of the client peer to retrieve.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.IClientPeer"/> representing the client peer with the specified ID.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.DestroyClientPeer(System.Int32)">
            <summary>
            Destroys a client peer by its client ID.
            </summary>
            <param name="clientId">The ID of the client peer to destroy.</param>
            <returns>True if the client peer was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.IClientPeerFactory.Service">
            <summary>
            Services all client peers, processing any pending tasks or requests.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest">
            <summary>
            Represents an initialization request for a client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest.SessionId">
            <summary>
            Gets the session identifier.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest.EncryptKey">
            <summary>
            Gets the encryption key.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Models.ClientPeerInitRequest">
            <summary>
            Implements the <see cref="T:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest"/> interface.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.ClientPeerInitRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.ClientPeerInitRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.ClientPeerInitRequest.EncryptKey">
            <summary>
            Gets or sets the encryption key.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Models.OperationEventPending">
            <summary>
            Represents a pending operation event that is queued for sending to the server.
            Stores the event data and the parameters used for sending it.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationEventPending.operationEvent">
            <summary>
            The operation event that is pending to be sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationEventPending.sendParameters">
            <summary>
            The parameters used for sending the operation event.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationEventPending.#ctor(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Models.OperationEventPending"/> class.
            </summary>
            <param name="operationEvent">The operation event to be sent.</param>
            <param name="sendParameters">The parameters used for sending the event.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationEventPending.GetOperationEvent">
            <summary>
            Gets the operation event that is pending to be sent.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.OperationEvent"/> that is pending.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationEventPending.GetSendParameters">
            <summary>
            Gets the parameters used for sending the operation event.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.SendParameters"/> used for sending the event.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Models.OperationRequestPending">
            <summary>
            Represents a pending operation request that is queued for sending to the server.
            Stores the request data, parameters, and the callback for handling the server's response.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.MillisecondsToTick">
            <summary>
            Constant for converting milliseconds to ticks.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.SecondsToTick">
            <summary>
            Constant for converting seconds to ticks.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.operationRequest">
            <summary>
            The operation request that is pending to be sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.sendParameters">
            <summary>
            The parameters used for sending the operation request.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.onOperationResponse">
            <summary>
            The callback action to be invoked when the server responds to the request.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.timeoutInSeconds">
            <summary>
            The timeout period for the operation request in seconds.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.responseSendParameters">
            <summary>
            The parameters used for receiving the operation response.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.operationResponse">
            <summary>
            The response received from the server for this operation request.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.tickEndTimeout">
            <summary>
            The tick count at which the request will timeout.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.tickSend">
            <summary>
            The tick count when the request was sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.tickRecv">
            <summary>
            The tick count when the response was received.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.#ctor(XmobiTea.ProtonNet.Networking.OperationRequest,System.Action{XmobiTea.ProtonNet.Networking.OperationResponse},XmobiTea.ProtonNet.Networking.SendParameters,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Models.OperationRequestPending"/> class.
            </summary>
            <param name="operationRequest">The operation request to be sent.</param>
            <param name="onOperationResponse">The callback to be invoked upon receiving the response.</param>
            <param name="sendParameters">The parameters used for sending the request.</param>
            <param name="timeoutInSeconds">The timeout period for the request in seconds.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.OnSend">
            <summary>
            Marks the request as sent and updates the send and timeout ticks.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.OnRecv">
            <summary>
            Marks the request as received by updating the receive tick count.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.SetOperationResponse(XmobiTea.ProtonNet.Networking.OperationResponse)">
            <summary>
            Sets the response received from the server for this operation request.
            </summary>
            <param name="operationResponse">The response from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.SetResponseSendParameters(XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Sets the parameters used for receiving the operation response.
            </summary>
            <param name="sendParameters">The parameters used for receiving the operation response.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetExecuteTimerInMs">
            <summary>
            Gets the execution time in milliseconds for the operation request, 
            calculated from the time it was sent until the response was received.
            </summary>
            <returns>The execution time in milliseconds.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.IsTimeout">
            <summary>
            Checks if the operation request has timed out.
            </summary>
            <returns>True if the request has timed out, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetTimeoutInSeconds">
            <summary>
            Gets the timeout in seconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetOperationRequest">
            <summary>
            Gets the operation request that is pending to be sent.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.OperationRequest"/> that is pending.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetOperationResponse">
            <summary>
            Gets the response received from the server for this operation request.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.OperationResponse"/> received from the server.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetSendParameters">
            <summary>
            Gets the parameters used for sending the operation request.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.SendParameters"/> used for sending the request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetResponseSendParameters">
            <summary>
            The parameters used for receiving the operation response.
            </summary>
            <returns>The <see cref="T:XmobiTea.ProtonNet.Networking.SendParameters"/> used for receiving the response.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Models.OperationRequestPending.GetCallback">
            <summary>
            Gets the callback action to be invoked when the server responds to the request.
            </summary>
            <returns>The callback action for handling the response.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.IInitRequestProviderService">
            <summary>
            Interface for a service that provides initialization requests 
            for creating new client peers. 
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IInitRequestProviderService.NewClientPeerInitRequest">
            <summary>
            Creates a new initialization request for a client peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest"/> containing the initialization data.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService">
            <summary>
            Service that provides initialization requests for creating new client peers. 
            It generates session IDs, encryption keys, and client IDs for the requests.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.SessionIdLength">
            <summary>
            Length of the session ID to be generated.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.EncryptLength">
            <summary>
            Length of the encryption key to be generated.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.sessionIdProvider">
            <summary>
            Provider for generating session IDs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.encryptKeyProvider">
            <summary>
            Provider for generating encryption keys.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.clientIdProvider">
            <summary>
            Provider for generating client IDs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.sessionId">
            <summary>
            The session ID generated for this service instance.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.NewClientPeerInitRequest">
            <summary>
            Creates a new initialization request for a client peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest"/> containing the initialization data.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.SessionIdProvider">
            <summary>
            Nested class responsible for generating random session IDs.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.SessionIdProvider.AllCharacters">
            <summary>
            The characters used to generate the session ID.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.SessionIdProvider.GenerateRandomSessionId">
            <summary>
            Generates a random session ID.
            </summary>
            <returns>A randomly generated session ID as a string.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.EncryptKeyProvider">
            <summary>
            Nested class responsible for generating random encryption keys.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.EncryptKeyProvider.AllCharacters">
            <summary>
            The characters used to generate the encryption key.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.EncryptKeyProvider.GenerateRandomEncryptKey">
            <summary>
            Generates a random encryption key.
            </summary>
            <returns>A randomly generated encryption key as a byte array.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.ClientIdProvider">
            <summary>
            Nested class responsible for generating unique client IDs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.ClientIdProvider.clientId">
            <summary>
            The current client ID counter.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.InitRequestProviderService.ClientIdProvider.GenerateNextClientId">
            <summary>
            Generates the next unique client ID.
            </summary>
            <returns>The next unique client ID as an integer.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService">
            <summary>
            Interface for handling the serialization and deserialization of 
            operation models in an RPC (Remote Procedure Call) communication protocol.
            Provides methods for writing data to a stream, optionally with encryption,
            and for reading and deserializing data from a stream.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService.Write(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType)">
            <summary>
            Writes an operation model to a stream.
            </summary>
            <param name="stream">The stream to which the operation model is written.</param>
            <param name="operationType">The type of operation being written.</param>
            <param name="operationModel">The operation model to be written.</param>
            <param name="sendParameters">Parameters for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService.WriteEncrypt(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType,System.Byte[])">
            <summary>
            Writes an encrypted operation model to a stream.
            </summary>
            <param name="stream">The stream to which the operation model is written.</param>
            <param name="operationType">The type of operation being written.</param>
            <param name="operationModel">The operation model to be written.</param>
            <param name="sendParameters">Parameters for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption.</param>
            <param name="encryptKey">The encryption key used for encrypting the data.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService.TryRead(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Models.OperationHeader@,System.Byte[]@)">
            <summary>
            Tries to read an operation from a stream and extracts the operation header and payload.
            </summary>
            <param name="stream">The stream from which the operation is read.</param>
            <param name="header">The header of the operation that was read.</param>
            <param name="payload">The payload of the operation that was read.</param>
            <returns>True if the operation was successfully read, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService.TryDeserializeOperationModel(System.Byte[],XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.Networking.IOperationModel@)">
            <summary>
            Tries to deserialize an operation model from the provided payload.
            </summary>
            <param name="payload">The payload containing the serialized operation model.</param>
            <param name="operationType">The type of operation to deserialize.</param>
            <param name="protocolProviderType">The protocol provider type used for deserialization.</param>
            <param name="operationModel">The deserialized operation model.</param>
            <returns>True if the operation model was successfully deserialized, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService.TryDeserializeEncryptOperationModel(System.Byte[],XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType,System.Byte[],XmobiTea.ProtonNet.Networking.IOperationModel@)">
            <summary>
            Tries to deserialize an encrypted operation model from the provided payload.
            </summary>
            <param name="payload">The payload containing the serialized operation model.</param>
            <param name="operationType">The type of operation to deserialize.</param>
            <param name="protocolProviderType">The protocol provider type used for deserialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for decryption.</param>
            <param name="encryptKey">The encryption key used for decrypting the data.</param>
            <param name="operationModel">The deserialized operation model.</param>
            <returns>True if the operation model was successfully deserialized and decrypted, otherwise false.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Services.RpcProtocolService">
            <summary>
            Implements the <see cref="T:XmobiTea.ProtonNet.Client.Services.IRpcProtocolService"/> interface, providing methods for 
            handling RPC protocol operations, including serialization, deserialization, 
            and encryption of operation models.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.saltCustomData">
            <summary>
            Custom salt data used for encryption operations.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.rpcProtocol">
            <summary>
            The RPC protocol instance used for performing protocol operations.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Services.RpcProtocolService"/> class.
            </summary>
            <param name="saltCustomData">Custom salt data used for encryption operations.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.CreateRpcProtocol">
            <summary>
            Creates and initializes an instance of the RPC protocol with the necessary 
            protocol providers and crypto providers.
            </summary>
            <returns>An initialized <see cref="T:XmobiTea.ProtonNet.RpcProtocol.IRpcProtocol"/> instance.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.TryDeserializeEncryptOperationModel(System.Byte[],XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType,System.Byte[],XmobiTea.ProtonNet.Networking.IOperationModel@)">
            <summary>
            Tries to deserialize and decrypt an encrypted operation model from the provided payload.
            </summary>
            <param name="payload">The payload containing the encrypted operation model.</param>
            <param name="operationType">The type of operation to deserialize.</param>
            <param name="protocolProviderType">The protocol provider type used for deserialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for decryption.</param>
            <param name="encryptKey">The encryption key used for decrypting the data.</param>
            <param name="operationModel">The deserialized operation model.</param>
            <returns>True if the operation model was successfully deserialized and decrypted, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.TryDeserializeOperationModel(System.Byte[],XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.Networking.IOperationModel@)">
            <summary>
            Tries to deserialize an operation model from the provided payload.
            </summary>
            <param name="payload">The payload containing the serialized operation model.</param>
            <param name="operationType">The type of operation to deserialize.</param>
            <param name="protocolProviderType">The protocol provider type used for deserialization.</param>
            <param name="operationModel">The deserialized operation model.</param>
            <returns>True if the operation model was successfully deserialized, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.TryRead(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Models.OperationHeader@,System.Byte[]@)">
            <summary>
            Tries to read an operation from a stream and extracts the operation header and payload.
            </summary>
            <param name="stream">The stream from which the operation is read.</param>
            <param name="header">The header of the operation that was read.</param>
            <param name="payload">The payload of the operation that was read.</param>
            <returns>True if the operation was successfully read, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.Write(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType)">
            <summary>
            Writes an operation model to a stream.
            </summary>
            <param name="stream">The stream to which the operation model is written.</param>
            <param name="operationType">The type of operation being written.</param>
            <param name="operationModel">The operation model to be written.</param>
            <param name="sendParameters">Parameters for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Services.RpcProtocolService.WriteEncrypt(System.IO.Stream,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType,System.Byte[])">
            <summary>
            Writes an encrypted operation model to a stream.
            </summary>
            <param name="stream">The stream to which the operation model is written.</param>
            <param name="operationType">The type of operation being written.</param>
            <param name="operationModel">The operation model to be written.</param>
            <param name="sendParameters">Parameters for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption.</param>
            <param name="encryptKey">The encryption key used for encrypting the data.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.OnSocketClientConnected">
            <summary>
            Delegate for handling socket client connection events.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.OnSocketClientDisconnected">
            <summary>
            Delegate for handling socket client disconnection events.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.OnSocketClientReceived">
            <summary>
            Delegate for handling data received by the socket client.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.OnSocketClientError">
            <summary>
            Delegate for handling socket client errors.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey">
            <summary>
            Interface for setting the encryption key used by the socket client.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used for encrypting and decrypting data.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient">
            <summary>
            Interface representing a socket client, responsible for managing socket connections and data transmission.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the socket client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.Connect">
            <summary>
            Initiates a connection to the server.
            </summary>
            <returns>True if the connection is successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.Reconnect">
            <summary>
            Reconnects to the server.
            </summary>
            <returns>True if the reconnection is successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.Send(System.Byte[])">
            <summary>
            Sends data synchronously to the server.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.SendAsync(System.Byte[])">
            <summary>
            Sends data asynchronously to the server.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>True if the data was successfully queued for sending, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.Disconnect">
            <summary>
            Disconnects the socket client from the server.
            </summary>
            <returns>True if the disconnection is successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.IsConnected">
            <summary>
            Checks if the socket client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient.GetNetworkStatistics">
            <summary>
            Retrieves network statistics for the socket client.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNetCommon.INetworkStatistics"/> representing the client's network statistics.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient">
            <summary>
            Represents a secure socket client that uses SSL/TLS for communication, implementing the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> and <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey"/> interfaces.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onConnected">
            <summary>
            Event handler for when the client connects to the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onDisconnected">
            <summary>
            Event handler for when the client disconnects from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onReceived">
            <summary>
            Event handler for when the client receives data from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onError">
            <summary>
            Event handler for when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.encryptKey">
            <summary>
            The encryption key used for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.#ctor(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient"/> class with the specified server address, port, client options, and Ssl options.
            </summary>
            <param name="address">The server address.</param>
            <param name="port">The server port.</param>
            <param name="options">The TCP client options.</param>
            <param name="sslOptions">The Ssl options for secure communication.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used by the client.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.Connect">
            <summary>
            Initiates a connection to the server asynchronously.
            </summary>
            <returns>True if the connection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.Disconnect">
            <summary>
            Disconnects from the server asynchronously.
            </summary>
            <returns>True if the disconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.IsConnected">
            <summary>
            Checks if the client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.Reconnect">
            <summary>
            Reconnects to the server asynchronously.
            </summary>
            <returns>True if the reconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.OnConnected">
            <summary>
            Called when the client successfully connects to the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onConnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.OnDisconnected">
            <summary>
            Called when the client disconnects from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onDisconnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when the client receives data from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onReceived"/> event handler.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Called when a socket error occurs.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketSslClient.onError"/> event handler.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient">
            <summary>
            Represents a TCP socket client, implementing the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> and <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey"/> interfaces.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onConnected">
            <summary>
            Event handler for when the client connects to the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onDisconnected">
            <summary>
            Event handler for when the client disconnects from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onReceived">
            <summary>
            Event handler for when the client receives data from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onError">
            <summary>
            Event handler for when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.encryptKey">
            <summary>
            The encryption key used for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.#ctor(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient"/> class with the specified server address, port, and client options.
            </summary>
            <param name="address">The server address.</param>
            <param name="port">The server port.</param>
            <param name="options">The TCP client options.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used by the client.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.Connect">
            <summary>
            Initiates a connection to the server asynchronously.
            </summary>
            <returns>True if the connection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.Disconnect">
            <summary>
            Disconnects from the server asynchronously.
            </summary>
            <returns>True if the disconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.IsConnected">
            <summary>
            Checks if the client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.Reconnect">
            <summary>
            Reconnects to the server asynchronously.
            </summary>
            <returns>True if the reconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.OnConnected">
            <summary>
            Called when the client successfully connects to the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onConnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.OnDisconnected">
            <summary>
            Called when the client disconnects from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onDisconnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when the client receives data from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onReceived"/> event handler.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Called when a socket error occurs.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketTcpClient.onError"/> event handler.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient">
            <summary>
            Represents a UDP socket client, implementing the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> and <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey"/> interfaces.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onConnected">
            <summary>
            Event handler for when the client connects to the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onDisconnected">
            <summary>
            Event handler for when the client disconnects from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onReceived">
            <summary>
            Event handler for when the client receives data from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onError">
            <summary>
            Event handler for when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.encryptKey">
            <summary>
            The encryption key used for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.#ctor(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.UdpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient"/> class with the specified server address, port, and client options.
            </summary>
            <param name="address">The server address.</param>
            <param name="port">The server port.</param>
            <param name="options">The UDP client options.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used by the client.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.Connect">
            <summary>
            Initiates a connection to the server asynchronously.
            </summary>
            <returns>True if the connection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.Disconnect">
            <summary>
            Disconnects from the server asynchronously.
            </summary>
            <returns>True if the disconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.IsConnected">
            <summary>
            Checks if the client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.Reconnect">
            <summary>
            Reconnects to the server asynchronously.
            </summary>
            <returns>True if the reconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.OnConnected">
            <summary>
            Called when the client successfully connects to the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onConnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.OnDisconnected">
            <summary>
            Called when the client disconnects from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onDisconnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.OnReceived(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when the client receives data from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onReceived"/> event handler.
            </summary>
            <param name="endpoint">The endpoint from which the data was received.</param>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Called when a socket error occurs.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketUdpClient.onError"/> event handler.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient">
            <summary>
            Represents a WebSocket client, implementing the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> and <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey"/> interfaces.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onConnected">
            <summary>
            Event handler for when the client connects to the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onDisconnected">
            <summary>
            Event handler for when the client disconnects from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onReceived">
            <summary>
            Event handler for when the client receives data from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onError">
            <summary>
            Event handler for when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.encryptKey">
            <summary>
            The encryption key used for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.#ctor(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient"/> class with the specified server address, port, and client options.
            </summary>
            <param name="address">The server address.</param>
            <param name="port">The server port.</param>
            <param name="options">The TCP client options.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used by the client.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.Connect">
            <summary>
            Initiates a connection to the server asynchronously.
            </summary>
            <returns>True if the connection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.Disconnect">
            <summary>
            Disconnects from the server asynchronously.
            </summary>
            <returns>True if the disconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.IsConnected">
            <summary>
            Checks if the client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.Reconnect">
            <summary>
            Reconnects to the server asynchronously.
            </summary>
            <returns>True if the reconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.OnWsConnected(XmobiTea.ProtonNetCommon.HttpResponse)">
            <summary>
            Called when the WebSocket client successfully connects to the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onConnected"/> event handler.
            </summary>
            <param name="response">The HTTP response received upon WebSocket connection.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.OnDisconnected">
            <summary>
            Called when the client disconnects from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onDisconnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.OnWsReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when the WebSocket client receives data from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onReceived"/> event handler.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Called when a socket error occurs.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.onError"/> event handler.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.Send(System.Byte[])">
            <summary>
            Sends data to the server as a binary message.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWsClient.SendAsync(System.Byte[])">
            <summary>
            Sends data asynchronously to the server as a binary message.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>True if the data was successfully queued for sending, otherwise false.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient">
            <summary>
            Represents a WebSocket Secure (WSS) client, implementing the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> and <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISetEncryptKey"/> interfaces.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onConnected">
            <summary>
            Event handler for when the client connects to the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onDisconnected">
            <summary>
            Event handler for when the client disconnects from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onReceived">
            <summary>
            Event handler for when the client receives data from the server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onError">
            <summary>
            Event handler for when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.encryptKey">
            <summary>
            The encryption key used for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.#ctor(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient"/> class with the specified server address, port, client options, and Ssl options.
            </summary>
            <param name="address">The server address.</param>
            <param name="port">The server port.</param>
            <param name="options">The TCP client options.</param>
            <param name="sslOptions">The Ssl options for secure communication.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.SetEncryptKey(System.Byte[])">
            <summary>
            Sets the encryption key used by the client.
            </summary>
            <param name="encryptKey">The encryption key as a byte array.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.GetEncryptKey">
            <summary>
            Gets the encryption key used by the client.
            </summary>
            <returns>The encryption key as a byte array.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.Connect">
            <summary>
            Initiates a connection to the server asynchronously.
            </summary>
            <returns>True if the connection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.Disconnect">
            <summary>
            Disconnects from the server asynchronously.
            </summary>
            <returns>True if the disconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.IsConnected">
            <summary>
            Checks if the client is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.Reconnect">
            <summary>
            Reconnects to the server asynchronously.
            </summary>
            <returns>True if the reconnection was successfully initiated, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.OnWsConnected(XmobiTea.ProtonNetCommon.HttpResponse)">
            <summary>
            Called when the WebSocket client successfully connects to the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onConnected"/> event handler.
            </summary>
            <param name="response">The HTTP response received upon WebSocket connection.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.OnDisconnected">
            <summary>
            Called when the client disconnects from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onDisconnected"/> event handler.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.OnWsReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when the WebSocket client receives data from the server.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onReceived"/> event handler.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The position in the buffer where the data starts.</param>
            <param name="length">The length of the data received.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Called when a socket error occurs.
            Invokes the <see cref="F:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.onError"/> event handler.
            </summary>
            <param name="error">The socket error that occurred.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.Send(System.Byte[])">
            <summary>
            Sends data to the server as a binary message.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Clients.SocketWssClient.SendAsync(System.Byte[])">
            <summary>
            Sends data asynchronously to the server as a binary message.
            </summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <returns>True if the data was successfully queued for sending, otherwise false.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler">
            <summary>
            Interface for handling events that occur during socket communication.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler.GetCode">
            <summary>
            Gets the code associated with this event handler, used to identify the event type.
            </summary>
            <returns>A string representing the event code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler.Handle(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Handles the specified operation event.
            </summary>
            <param name="operationEvent">The operation event to handle.</param>
            <param name="sendParameters">Parameters controlling how the event is handled.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler">
            <summary>
            Abstract base class for handling events during socket communication.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler.logger">
            <summary>
            Logger instance for logging messages.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler.GetCode">
            <summary>
            Gets the code associated with this event handler, used to identify the event type.
            </summary>
            <returns>A string representing the event code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler.Handle(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Handles the specified operation event.
            </summary>
            <param name="operationEvent">The operation event to handle.</param>
            <param name="sendParameters">Parameters controlling how the event is handled.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler`1">
            <summary>
            Abstract generic class for handling specific types of events during socket communication.
            </summary>
            <typeparam name="TEventModel">The type of the event model to be handled.</typeparam>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler`1.dataConverter">
            <summary>
            Data converter for deserializing event parameters.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler`1.Handle(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Handles the specified operation event by converting its parameters to the specific event model.
            </summary>
            <param name="operationEvent">The operation event to handle.</param>
            <param name="sendParameters">Parameters controlling how the event is handled.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler`1.ConvertToEventModel(XmobiTea.ProtonNet.Networking.OperationEvent)">
            <summary>
            Converts the operation event's parameters to the specific event model.
            </summary>
            <param name="operationEvent">The operation event containing the parameters to convert.</param>
            <returns>An instance of <typeparamref name="TEventModel"/> representing the event model.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.EventHandler`1.Handle(`0,XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Abstract method for handling the specific event model after conversion.
            </summary>
            <param name="eventModel">The converted event model to handle.</param>
            <param name="operationEvent">The original operation event.</param>
            <param name="sendParameters">Parameters controlling how the event is handled.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler">
            <summary>
            Interface for handling socket operation models of any type.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles a socket operation model.
            </summary>
            <param name="socketClientPeer">The client peer handling the operation.</param>
            <param name="operationModel">The operation model to be handled.</param>
            <param name="sendParameters">Parameters controlling how the operation is handled.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler`1">
            <summary>
            Generic interface for handling specific types of socket operation models.
            </summary>
            <typeparam name="TOperationModel">The type of the operation model to be handled.</typeparam>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler`1.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,`0,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles a specific type of socket operation model.
            </summary>
            <param name="socketClientPeer">The client peer handling the operation.</param>
            <param name="operationModel">The specific operation model to be handled.</param>
            <param name="sendParameters">Parameters controlling how the operation is handled.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1">
            <summary>
            Abstract base class for handling specific types of socket operation models.
            </summary>
            <typeparam name="TOperationModel">The type of the operation model to be handled.</typeparam>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1.logger">
            <summary>
            Logger instance for logging messages.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1.XmobiTea#ProtonNet#Client#Socket#Handlers#ISocketOperationModelHandler#Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles a socket operation model by casting it to the specific type <typeparamref name="TOperationModel"/>.
            </summary>
            <param name="socketClientPeer">The client peer handling the operation.</param>
            <param name="operationModel">The operation model to be handled.</param>
            <param name="sendParameters">Parameters controlling how the operation is handled.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.AbstractOperationModelHandler`1.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,`0,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Abstract method for handling a specific type of socket operation model.
            </summary>
            <param name="socketClientPeer">The client peer handling the operation.</param>
            <param name="operationModel">The specific operation model to be handled.</param>
            <param name="sendParameters">Parameters controlling how the operation is handled.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationRequestHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationRequest"/> instances, typically issued by clients.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationRequestHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationRequest,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Logs a warning as only the server should handle <see cref="T:XmobiTea.ProtonNet.Networking.OperationRequest"/>.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationResponseHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationResponse"/> instances, typically issued by servers.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationResponseHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationResponse,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationResponse"/> by invoking the corresponding internal method on the client peer.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationEventHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationEvent"/> instances, typically issued by servers to notify clients of events.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationEventHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationEvent"/> by invoking the corresponding internal method on the client peer.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationPingHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationPing"/> instances, typically issued by servers to check the client's connection status.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationPingHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationPing,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationPing"/> by responding with a pong operation.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationPongHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationPong"/> instances, typically issued by clients in response to a ping operation from the server.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationPongHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationPong,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationPong"/> by invoking the corresponding internal method on the client peer.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationHandshakeHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationHandshake"/> instances, typically issued by clients to initiate a connection with the server.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationHandshakeHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationHandshake,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Logs a warning as only the server should handle <see cref="T:XmobiTea.ProtonNet.Networking.OperationHandshake"/>.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationHandshakeAckHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationHandshakeAck"/> instances, typically issued by servers to acknowledge a client's handshake request.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationHandshakeAckHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationHandshakeAck,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationHandshakeAck"/> by invoking the corresponding internal method on the client peer.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationDisconnectHandler">
            <summary>
            Handles <see cref="T:XmobiTea.ProtonNet.Networking.OperationDisconnect"/> instances, typically issued by servers to notify clients of disconnection events.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Handlers.OperationDisconnectHandler.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.Networking.OperationDisconnect,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles an <see cref="T:XmobiTea.ProtonNet.Networking.OperationDisconnect"/> by logging a warning and invoking the corresponding internal method on the client peer.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.OnConnected">
            <summary>
            Delegate for handling events when a connection is successfully established.
            </summary>
            <param name="connectionId">The unique ID of the connection.</param>
            <param name="serverSessionId">The session ID provided by the server.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.OnDisconnected">
            <summary>
            Delegate for handling events when a disconnection occurs.
            </summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="message">A message describing the disconnection.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.OnOperationEvent">
            <summary>
            Delegate for handling incoming operation events.
            </summary>
            <param name="operationEvent">The operation event received.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.OnError">
            <summary>
            Delegate for handling socket errors.
            </summary>
            <param name="error">The socket error encountered.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer">
            <summary>
            Interface representing a socket client peer, which is responsible for managing 
            socket connections, sending events, and handling callbacks for various socket events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.OnConnected">
            <summary>
            Event triggered when a connection is successfully established.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.OnDisconnected">
            <summary>
            Event triggered when a disconnection occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.OnOperationEvent">
            <summary>
            Event triggered when an operation event is received.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.OnError">
            <summary>
            Event triggered when a socket error occurs.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.GetSocketClient">
            <summary>
            Retrieves the underlying socket client associated with this peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the socket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.Send(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Sends an operation event to the server.
            </summary>
            <param name="operationEvent">The operation event to send.</param>
            <param name="sendParameters">Optional parameters for sending the event.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.Connect(System.Boolean,XmobiTea.ProtonNet.Client.Socket.OnConnected,XmobiTea.ProtonNet.Client.Socket.OnDisconnected)">
            <summary>
            Establishes a connection to the server.
            </summary>
            <param name="autoReconnect">Specifies whether to automatically reconnect if the connection is lost.</param>
            <param name="onConnected">Callback for handling successful connections.</param>
            <param name="onDisconnected">Callback for handling disconnections.</param>
            <returns>True if the connection was successfully established, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.Reconnect(System.Boolean,XmobiTea.ProtonNet.Client.Socket.OnConnected,XmobiTea.ProtonNet.Client.Socket.OnDisconnected)">
            <summary>
            Reconnects to the server.
            </summary>
            <param name="autoReconnect">Specifies whether to automatically reconnect if the connection is lost.</param>
            <param name="onConnected">Callback for handling successful connections.</param>
            <param name="onDisconnected">Callback for handling disconnections.</param>
            <returns>True if the reconnection was successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <returns>True if the disconnection was successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer.IsConnected">
            <summary>
            Checks if the client peer is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.ISocketPingPong">
            <summary>
            Interface that defines the service method for managing ping-pong 
            operations over a socket connection.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.ISocketPingPong.Service">
            <summary>
            Services the socket ping-pong operation, sending pings at regular intervals.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.SocketPingPong">
            <summary>
            Implements the <see cref="T:XmobiTea.ProtonNet.Client.Socket.ISocketPingPong"/> interface to manage 
            the ping-pong operations between the client and server over a socket connection.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.SendPingInterval">
            <summary>
            Interval in ticks for sending ping messages.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.client">
            <summary>
            The socket client associated with this ping-pong service.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.socketSessionEmitService">
            <summary>
            Service responsible for emitting socket session events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.nextSend">
            <summary>
            The tick count at which the next ping should be sent.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.#ctor(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.SocketPingPong"/> class.
            </summary>
            <param name="client">The socket client associated with this ping-pong service.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.SendPind">
            <summary>
            Sends a ping message to the server.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketPingPong.Service">
            <summary>
            Services the socket ping-pong operation by sending a ping if the interval has elapsed.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.IEventService">
            <summary>
            Interface for an event service that manages event handlers and processes incoming operation events.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.IEventService.GetHandler(System.String)">
            <summary>
            Retrieves the event handler associated with the specified event code.
            </summary>
            <param name="code">The code of the event to handle.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler"/> that handles the specified event code, or null if no handler is found.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.IEventService.Handle(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Processes an incoming operation event by passing it to the appropriate event handler.
            </summary>
            <param name="operationEvent">The operation event to handle.</param>
            <param name="sendParameters">The parameters used for sending the event.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.EventService">
            <summary>
            Implementation of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.IEventService"/> that manages event handlers and processes incoming operation events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Services.EventService.handlerDict">
            <summary>
            Dictionary that maps event codes to their corresponding event handlers.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.EventService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.EventService"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.EventService.AddHandler(XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler)">
            <summary>
            Adds an event handler to the service.
            </summary>
            <param name="eventHandler">The event handler to add.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.EventService.RemoveHandler(System.String)">
            <summary>
            Removes the event handler associated with the specified event code.
            </summary>
            <param name="code">The code of the event handler to remove.</param>
            <returns>True if the handler was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.EventService.GetHandler(System.String)">
            <summary>
            Retrieves the event handler associated with the specified event code.
            </summary>
            <param name="code">The code of the event to handle.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Handlers.IEventHandler"/> that handles the specified event code, or null if no handler is found.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.EventService.Handle(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer)">
            <summary>
            Processes an incoming operation event by passing it to the appropriate event handler.
            </summary>
            <param name="operationEvent">The operation event to handle.</param>
            <param name="sendParameters">The parameters used for sending the event.</param>
            <param name="clientPeer">The client peer that received the event.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.ISocketOperationModelService">
            <summary>
            Interface for a service that handles socket operation models based on their operation type.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketOperationModelService.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles a socket operation model by dispatching it to the appropriate handler based on the operation type.
            </summary>
            <param name="socketClientPeer">The client peer that received the operation.</param>
            <param name="operationType">The type of operation to handle.</param>
            <param name="operationModel">The operation model to be handled.</param>
            <param name="sendParameters">The parameters used for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService">
            <summary>
            Implementation of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.ISocketOperationModelService"/> that manages operation model handlers and processes incoming operations.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService.operationModelHandlerDict">
            <summary>
            Dictionary that maps operation types to their corresponding operation model handlers.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService.AddHandler(XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler)">
            <summary>
            Adds a handler for a specific operation type.
            </summary>
            <param name="operationType">The operation type for which the handler is added.</param>
            <param name="handler">The handler that processes the specified operation type.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService.GetHandler(XmobiTea.ProtonNet.RpcProtocol.Types.OperationType)">
            <summary>
            Retrieves the handler associated with the specified operation type.
            </summary>
            <param name="operationType">The type of operation to retrieve the handler for.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Handlers.ISocketOperationModelHandler"/> if a handler is found, otherwise null.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketOperationModelService.Handle(XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Handles a socket operation model by dispatching it to the appropriate handler based on the operation type.
            </summary>
            <param name="socketClientPeer">The client peer that received the operation.</param>
            <param name="operationType">The type of operation to handle.</param>
            <param name="operationModel">The operation model to be handled.</param>
            <param name="sendParameters">The parameters used for sending the operation.</param>
            <param name="protocolProviderType">The protocol provider type used for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type used for encryption, if applicable.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService">
            <summary>
            Interface for a service that handles emitting various types of socket operations, 
            such as events, requests, responses, and protocol-specific operations like ping, pong, and handshakes.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationEvent(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Sends an operation event to the server.
            </summary>
            <param name="client">The socket client used to send the event.</param>
            <param name="operationEvent">The operation event to send.</param>
            <param name="sendParameters">Parameters controlling how the event is sent.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationResponse(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationResponse,XmobiTea.ProtonNet.Networking.SendParameters,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType},System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Sends an operation response to the server.
            </summary>
            <param name="client">The socket client used to send the response.</param>
            <param name="operationResponse">The operation response to send.</param>
            <param name="sendParameters">Parameters controlling how the response is sent.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <param name="cryptoProviderType">Optional crypto provider type for encryption.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationRequest(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationRequest,XmobiTea.ProtonNet.Networking.SendParameters,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType},System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Sends an operation request to the server.
            </summary>
            <param name="client">The socket client used to send the request.</param>
            <param name="operationRequest">The operation request to send.</param>
            <param name="sendParameters">Parameters controlling how the request is sent.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <param name="cryptoProviderType">Optional crypto provider type for encryption.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationPing(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationPing,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a ping operation to the server.
            </summary>
            <param name="client">The socket client used to send the ping.</param>
            <param name="operationPing">The ping operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationPong(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationPong,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a pong operation to the server in response to a ping.
            </summary>
            <param name="client">The socket client used to send the pong.</param>
            <param name="operationPong">The pong operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationHandshake(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationHandshake,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a handshake operation to the server to initiate a session.
            </summary>
            <param name="client">The socket client used to send the handshake.</param>
            <param name="operationHandshake">The handshake operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService.SendOperationHandshakeAck(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationHandshakeAck,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a handshake acknowledgment operation to the server in response to a handshake.
            </summary>
            <param name="client">The socket client used to send the handshake acknowledgment.</param>
            <param name="operationHandshakeAck">The handshake acknowledgment operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService">
            <summary>
            Implements the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.ISocketSessionEmitService"/> interface to handle the emission of various socket operations, 
            including events, requests, pings, pongs, and handshakes.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.DefaultProtocolProviderType">
            <summary>
            Default protocol provider type used for serialization.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.DefaultCryptoProviderType">
            <summary>
            Default crypto provider type used for encryption.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.logger">
            <summary>
            Logger instance for logging messages.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.rpcProtocolService">
            <summary>
            Service responsible for handling the RPC protocol.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.sendBufferSize">
            <summary>
            Maximum buffer size for sending messages.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationEvent(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Sends an operation event to the server.
            </summary>
            <param name="client">The socket client used to send the event.</param>
            <param name="operationEvent">The operation event to send.</param>
            <param name="sendParameters">Parameters controlling how the event is sent.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationResponse(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationResponse,XmobiTea.ProtonNet.Networking.SendParameters,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType},System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Logs a warning since clients should not send operation responses to the server.
            </summary>
            <param name="client">The socket client used to send the response.</param>
            <param name="operationResponse">The operation response to send.</param>
            <param name="sendParameters">Parameters controlling how the response is sent.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <param name="cryptoProviderType">Optional crypto provider type for encryption.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the operation failed.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationRequest(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationRequest,XmobiTea.ProtonNet.Networking.SendParameters,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType},System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType})">
            <summary>
            Sends an operation request to the server.
            </summary>
            <param name="client">The socket client used to send the request.</param>
            <param name="operationRequest">The operation request to send.</param>
            <param name="sendParameters">Parameters controlling how the request is sent.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <param name="cryptoProviderType">Optional crypto provider type for encryption.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationPing(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationPing,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a ping operation to the server.
            </summary>
            <param name="client">The socket client used to send the ping.</param>
            <param name="operationPing">The ping operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationPong(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationPong,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a pong operation to the server in response to a ping.
            </summary>
            <param name="client">The socket client used to send the pong.</param>
            <param name="operationPong">The pong operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationHandshake(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationHandshake,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Sends a handshake operation to the server to initiate a session.
            </summary>
            <param name="client">The socket client used to send the handshake.</param>
            <param name="operationHandshake">The handshake operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendOperationHandshakeAck(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.Networking.OperationHandshakeAck,System.Nullable{XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType})">
            <summary>
            Logs a warning since clients should not send handshake acknowledgment operations to the server.
            </summary>
            <param name="client">The socket client used to send the handshake acknowledgment.</param>
            <param name="operationHandshakeAck">The handshake acknowledgment operation to send.</param>
            <param name="protocolProviderType">Optional protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the operation failed.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendEncryptOperationModel(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType,XmobiTea.ProtonNet.RpcProtocol.Types.CryptoProviderType)">
            <summary>
            Sends an encrypted operation model to the server.
            </summary>
            <param name="client">The socket client used to send the operation.</param>
            <param name="operationType">The type of operation being sent.</param>
            <param name="operationModel">The operation model to send.</param>
            <param name="sendParameters">Parameters controlling how the operation is sent.</param>
            <param name="protocolProviderType">The protocol provider type for serialization.</param>
            <param name="cryptoProviderType">The crypto provider type for encryption.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.Services.SocketSessionEmitService.SendUnencryptOperationModel(XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient,XmobiTea.ProtonNet.RpcProtocol.Types.OperationType,XmobiTea.ProtonNet.Networking.IOperationModel,XmobiTea.ProtonNet.Networking.SendParameters,XmobiTea.ProtonNet.RpcProtocol.Types.ProtocolProviderType)">
            <summary>
            Sends an unencrypted operation model to the server.
            </summary>
            <param name="client">The socket client used to send the operation.</param>
            <param name="operationType">The type of operation being sent.</param>
            <param name="operationModel">The operation model to send.</param>
            <param name="sendParameters">Parameters controlling how the operation is sent.</param>
            <param name="protocolProviderType">The protocol provider type for serialization.</param>
            <returns>A <see cref="T:XmobiTea.ProtonNet.Networking.SendResult"/> indicating the result of the send operation.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer">
            <summary>
            Represents a client peer that manages socket connections, sends and receives operations, 
            and handles various socket events such as connection, disconnection, and errors.
            Inherits from <see cref="T:XmobiTea.ProtonNet.Client.ClientPeer"/> and implements <see cref="T:XmobiTea.ProtonNet.Client.Socket.ISocketClientPeer"/> and <see cref="T:XmobiTea.Bean.Support.IAfterAutoBind"/>.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.logPrefix">
            <summary>
            Prefix used in logging messages specific to this socket client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.socketSessionEmitService">
            <summary>
            Service responsible for emitting socket session events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.operationModelService">
            <summary>
            Service responsible for handling operation models.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.eventService">
            <summary>
            Service for handling various events within the client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.socketClient">
            <summary>
            The underlying socket client associated with this peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.socketPingPong">
            <summary>
            Service responsible for managing the ping-pong operation to keep the connection alive.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnConnected">
            <summary>
            Event triggered when a connection is successfully established.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnDisconnected">
            <summary>
            Event triggered when a disconnection occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnOperationEvent">
            <summary>
            Event triggered when an operation event is received.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnError">
            <summary>
            Event triggered when a socket error occurs.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer._lockOperationEventPending">
            <summary>
            Lock object for synchronizing access to pending operation events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.delayOperationEventReceivedPendings">
            <summary>
            List of pending operation events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer._lockDelayOperationEventPendings">
            <summary>
            Lock object for synchronizing access to delayed operation event pendings.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.delayOperationEventPendings">
            <summary>
            Queue of delayed operation event pendings.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.onImmediatelyConnected">
            <summary>
            Callback for immediate connection events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.onImmediatelyDisconnected">
            <summary>
            Callback for immediate disconnection events.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer._lockOther">
            <summary>
            Lock object for synchronizing access to other fields.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.isDisconnectedNotice">
            <summary>
            Indicates if a disconnection notice has been sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.isConnectedNotice">
            <summary>
            Indicates if a connection notice has been sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.isErrorNotice">
            <summary>
            Indicates if an error notice has been sent.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.socketError">
            <summary>
            The socket error that occurred.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.disconnectReason">
            <summary>
            The reason for the disconnection.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.disconnectMessage">
            <summary>
            The message describing the disconnection.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.serverSessionId">
            <summary>
            The session ID provided by the server.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.connectionId">
            <summary>
            The connection ID assigned to this peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.encryptKey">
            <summary>
            The encryption key used for securing communications.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.isHandshake">
            <summary>
            Indicates whether the handshake has been completed.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.autoReconnect">
            <summary>
            Indicates whether auto-reconnect is enabled.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.reconnectTask">
            <summary>
            Task for managing reconnection attempts.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.autoReconnectInSeconds">
            <summary>
            The delay in seconds before attempting to auto-reconnect.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.reconnectCount">
            <summary>
            The current count of reconnection attempts.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.udpClientOptions">
            <summary>
            Options for configuring the UDP client.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetClient.Options.UdpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer"/> class with the specified parameters.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetClient.Options.UdpClientOptions,XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer"/> class for a specific transport protocol.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetClient.Options.UdpClientOptions,XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer"/> class for a specific SSL transport protocol.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnAfterAutoBind">
            <summary>
            Executes any additional logic after auto-binding of dependencies.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.GetNetworkStatistics">
            <summary>
            Retrieves the network statistics associated with this socket client peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNetCommon.INetworkStatistics"/> representing the network statistics.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.GetSocketClient">
            <summary>
            Retrieves the underlying socket client associated with this peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the socket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewSocketClient(XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol)">
            <summary>
            Creates a new socket client for the specified transport protocol.
            </summary>
            <param name="protocol">The transport protocol to use (e.g., TCP, UDP, WS).</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the socket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewSslSocketClient(XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Creates a new SSL socket client for the specified SSL transport protocol.
            </summary>
            <param name="sslProtocol">The SSL transport protocol to use (e.g., SSL, WSS).</param>
            <param name="sslOptions">The Ssl options containing the certificate and other SSL-related settings.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the SSL socket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewSocketPingPong">
            <summary>
            Creates a new instance of the ping-pong service for managing keep-alive pings.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.ISocketPingPong"/>.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewTcpClient(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Creates a new TCP socket client.
            </summary>
            <param name="host">The host address of the server.</param>
            <param name="port">The port number to connect to.</param>
            <param name="tcpClientOptions">Options for configuring the TCP client.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the TCP client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewSslClient(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Creates a new SSL socket client.
            </summary>
            <param name="host">The host address of the server.</param>
            <param name="port">The port number to connect to.</param>
            <param name="tcpClientOptions">Options for configuring the TCP client.</param>
            <param name="sslOptions">The Ssl options containing the certificate and other SSL-related settings.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the SSL client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewUdpClient(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.UdpClientOptions)">
            <summary>
            Creates a new UDP socket client.
            </summary>
            <param name="host">The host address of the server.</param>
            <param name="port">The port number to connect to.</param>
            <param name="udpClientOptions">Options for configuring the UDP client.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the UDP client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewWsClient(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Creates a new WebSocket client.
            </summary>
            <param name="host">The host address of the server.</param>
            <param name="port">The port number to connect to.</param>
            <param name="tcpClientOptions">Options for configuring the WebSocket client.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the WebSocket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.NewWssClient(System.String,System.Int32,XmobiTea.ProtonNetClient.Options.TcpClientOptions,XmobiTea.ProtonNetCommon.SslOptions)">
            <summary>
            Creates a new secure WebSocket client.
            </summary>
            <param name="host">The host address of the server.</param>
            <param name="port">The port number to connect to.</param>
            <param name="tcpClientOptions">Options for configuring the WebSocket client.</param>
            <param name="sslOptions">The Ssl options containing the certificate and other SSL-related settings.</param>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNet.Client.Socket.Clients.ISocketClient"/> representing the secure WebSocket client.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnSocketClientConnected">
            <summary>
            Handles the socket client's connected event.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnSocketClientDisconnected">
            <summary>
            Handles the socket client's disconnected event.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnSocketClientReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handles the socket client's received event, processing incoming data.
            </summary>
            <param name="buffer">The buffer containing the received data.</param>
            <param name="position">The starting position in the buffer.</param>
            <param name="length">The length of the data in the buffer.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnSocketClientError(System.Net.Sockets.SocketError)">
            <summary>
            Handles the socket client's error event.
            </summary>
            <param name="error">The socket error encountered.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Send(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Sends an operation event to the server.
            </summary>
            <param name="operationEvent">The operation event to send.</param>
            <param name="sendParameters">The parameters used for sending the event.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Enqueue(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Enqueues an operation event to be sent to the server.
            </summary>
            <param name="operationEvent">The operation event to enqueue.</param>
            <param name="sendParameters">The parameters used for sending the event.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Connect(System.Boolean,XmobiTea.ProtonNet.Client.Socket.OnConnected,XmobiTea.ProtonNet.Client.Socket.OnDisconnected)">
            <summary>
            Establishes a connection to the server.
            </summary>
            <param name="autoReconnect">Specifies whether to automatically reconnect if the connection is lost.</param>
            <param name="onConnected">Callback for handling successful connections.</param>
            <param name="onDisconnected">Callback for handling disconnections.</param>
            <returns>True if the connection was successfully established, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Reconnect(System.Boolean,XmobiTea.ProtonNet.Client.Socket.OnConnected,XmobiTea.ProtonNet.Client.Socket.OnDisconnected)">
            <summary>
            Reconnects to the server.
            </summary>
            <param name="autoReconnect">Specifies whether to automatically reconnect if the connection is lost.</param>
            <param name="onConnected">Callback for handling successful connections.</param>
            <param name="onDisconnected">Callback for handling disconnections.</param>
            <returns>True if the reconnection was successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.DisconnectInternal">
            <summary>
            Handles the internal disconnection logic, disabling auto-reconnect and disposing of the reconnect task.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <returns>True if the disconnection was successful, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.IsConnected">
            <summary>
            Checks if the client peer is currently connected to the server.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.Service">
            <summary>
            Services the socket client peer, handling various events such as connection, disconnection, errors, and operation events.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.nextSendTickCount">
            <summary>
            The tick count at which the next operation event should be sent.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.SendDelayOperationEventPending">
            <summary>
            Sends any delayed operation events to the server.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.CheckWaitingOperationEventPending">
            <summary>
            Checks for any pending operation events and processes them.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.CheckWaitingConnectedPending">
            <summary>
            Checks for any pending connection events and processes them.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.CheckWaitingDisconnectedPending">
            <summary>
            Checks for any pending disconnection events and processes them.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnAutoReconnect(System.Int32)">
            <summary>
            On AutoReconnect call to reconnect the socket
            </summary>
            <param name="reconnectInSeconds">The reconnectInSeconds after</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.CheckWaitingErrorPending">
            <summary>
            Checks for any pending error events and processes them.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationResponseInternal(XmobiTea.ProtonNet.Networking.OperationResponse,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Handles the receipt of an operation response internally, matching it with a pending request.
            </summary>
            <param name="operationResponse">The operation response received from the server.</param>
            <param name="sendParameters">The send parameters to received response from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationEventInternal(XmobiTea.ProtonNet.Networking.OperationEvent,XmobiTea.ProtonNet.Networking.SendParameters)">
            <summary>
            Handles the receipt of an operation event internally, adding it to the list of pending events.
            </summary>
            <param name="operationEvent">The operation event received from the server.</param>
            <param name="sendParameters">The send parameters to received event from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationHandshakeAckInternal(XmobiTea.ProtonNet.Networking.OperationHandshakeAck)">
            <summary>
            Handles the receipt of an operation handshake acknowledgment internally, updating the connection state.
            </summary>
            <param name="operationHandshakeAck">The handshake acknowledgment received from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationDisconnectInternal(XmobiTea.ProtonNet.Networking.OperationDisconnect)">
            <summary>
            Handles the receipt of an operation disconnect event internally, initiating disconnection.
            </summary>
            <param name="operationDisconnect">The disconnect operation received from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationPingInternal(XmobiTea.ProtonNet.Networking.OperationPing)">
            <summary>
            Handles the receipt of an operation ping event internally, responding with a pong.
            </summary>
            <param name="operationPing">The ping operation received from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.OnReceiveOperationPongInternal(XmobiTea.ProtonNet.Networking.OperationPong)">
            <summary>
            Handles the receipt of an operation pong event internally.
            </summary>
            <param name="operationPong">The pong operation received from the server.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.SendOperation(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Sends an operation request to the server.
            </summary>
            <param name="operationRequestPending">The pending operation request to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.SendOperation(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Sends an operation event to the server.
            </summary>
            <param name="operationEventPending">The pending operation event to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.SendOperationPing(XmobiTea.ProtonNet.Networking.OperationPing)">
            <summary>
            Sends a ping operation to the server.
            </summary>
            <param name="operationPing">The ping operation to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.SendOperationPong(XmobiTea.ProtonNet.Networking.OperationPong)">
            <summary>
            Sends a pong operation to the server in response to a ping.
            </summary>
            <param name="operationPong">The pong operation to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.LogEnqueue(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Logs the enqueuing of an operation event.
            </summary>
            <param name="operationEventPending">The pending operation event that was enqueued.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.LogSend(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Logs the sending of an operation event.
            </summary>
            <param name="operationEventPending">The pending operation event that was sent.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Socket.SocketClientPeer.LogEvent(XmobiTea.ProtonNet.Networking.OperationEvent)">
            <summary>
            Logs the reception of an operation event.
            </summary>
            <param name="operationEvent">The operation event that was received.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol">
            <summary>
            Enum representing the different transport protocols that can be used for socket communication.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol.Udp">
            <summary>
            User Datagram Protocol (UDP) transport.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol.Tcp">
            <summary>
            Transmission Control Protocol (TCP) transport.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Types.TransportProtocol.Ws">
            <summary>
            WebSocket (WS) transport.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol">
            <summary>
            Enum representing the different SSL (Secure Sockets Layer) transport protocols that can be used for secure socket communication.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol.Ssl">
            <summary>
            Secure Sockets Layer (SSL) transport.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Socket.Types.SslTransportProtocol.Wss">
            <summary>
            Secure WebSocket (WSS) transport.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Supports.IDebugSupport">
            <summary>
            Interface that provides methods for generating debug information 
            related to the lifecycle of operation requests and events.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnEnqueue(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a string representation for when an operation request is enqueued.
            </summary>
            <param name="operationRequestPending">The pending operation request that was enqueued.</param>
            <returns>A string containing debug information about the enqueued operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnSend(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a string representation for when an operation request is sent.
            </summary>
            <param name="operationRequestPending">The pending operation request that was sent.</param>
            <returns>A string containing debug information about the sent operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnRecv(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a string representation for when an operation request is received.
            </summary>
            <param name="operationRequestPending">The pending operation request that was received.</param>
            <returns>A string containing debug information about the received operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnEnqueue(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Generates a string representation for when an operation event is enqueued.
            </summary>
            <param name="operationEventPending">The pending operation event that was enqueued.</param>
            <returns>A string containing debug information about the enqueued operation event.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnSend(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Generates a string representation for when an operation event is sent.
            </summary>
            <param name="operationEventPending">The pending operation event that was sent.</param>
            <returns>A string containing debug information about the sent operation event.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.IDebugSupport.ToStringOnEvent(XmobiTea.ProtonNet.Networking.OperationEvent)">
            <summary>
            Generates a string representation for when an operation event is received.
            </summary>
            <param name="operationEvent">The operation event that was received.</param>
            <returns>A string containing debug information about the received operation event.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService">
            <summary>
            Default implementation of the <see cref="T:XmobiTea.ProtonNet.Client.Supports.IDebugSupport"/> interface, 
            providing methods for generating debug information related to the 
            lifecycle of operation requests and events.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.UnknownReturnCode">
            <summary>
            Default string used when an unknown return code is encountered.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.Null">
            <summary>
            Default string used when an object is null.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.returnCodeToStringDict">
            <summary>
            Dictionary that maps return codes to their string representations.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService"/> class.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.AddReturnCodeToStrings">
            <summary>
            Adds predefined return code strings to the dictionary.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.GetReturnCodeToString(System.Byte)">
            <summary>
            Retrieves the string representation of a return code.
            </summary>
            <param name="returnCode">The return code to convert to a string.</param>
            <returns>A string representing the return code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnEnqueue(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a debug string when an operation request is enqueued.
            </summary>
            <param name="operationRequestPending">The pending operation request that was enqueued.</param>
            <returns>A string containing debug information about the enqueued operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnSend(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a debug string when an operation request is sent.
            </summary>
            <param name="operationRequestPending">The pending operation request that was sent.</param>
            <returns>A string containing debug information about the sent operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnRecv(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Generates a debug string when an operation request is received.
            </summary>
            <param name="operationRequestPending">The pending operation request that was received.</param>
            <returns>A string containing debug information about the received operation request.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnEvent(XmobiTea.ProtonNet.Networking.OperationEvent)">
            <summary>
            Generates a debug string when an operation event is received.
            </summary>
            <param name="operationEvent">The operation event that was received.</param>
            <returns>A string containing debug information about the received operation event.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOperationCode(System.String)">
            <summary>
            Converts the operation code to a string.
            </summary>
            <param name="operationCode">The operation code to convert.</param>
            <returns>A string representation of the operation code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringReturnCode(System.Byte)">
            <summary>
            Converts the return code to a string.
            </summary>
            <param name="returnCode">The return code to convert.</param>
            <returns>A string representation of the return code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringParameters(XmobiTea.Data.GNHashtable)">
            <summary>
            Converts the parameters to a string representation.
            </summary>
            <param name="parameters">The parameters to convert.</param>
            <returns>A string representation of the parameters.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringEventCode(System.String)">
            <summary>
            Converts the event code to a string.
            </summary>
            <param name="eventCode">The event code to convert.</param>
            <returns>A string representation of the event code.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnEnqueue(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Generates a debug string when an operation event is enqueued.
            </summary>
            <param name="operationEventPending">The pending operation event that was enqueued.</param>
            <returns>A string containing debug information about the enqueued operation event.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.Supports.DefaultDebugOperationService.ToStringOnSend(XmobiTea.ProtonNet.Client.Models.OperationEventPending)">
            <summary>
            Generates a debug string when an operation event is sent.
            </summary>
            <param name="operationEventPending">The pending operation event that was sent.</param>
            <returns>A string containing debug information about the sent operation event.</returns>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer">
            <summary>
            Represents a Web API client peer that communicates with the server using HTTP.
            Inherits from <see cref="T:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer"/> and implements the 
            <see cref="T:XmobiTea.ProtonNet.Client.WebApi.IWebApiClientPeer"/> interface.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.DefaultProtocolProviderType">
            <summary>
            The default protocol provider type used for serialization.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.DefaultCryptoProviderType">
            <summary>
            The default crypto provider type used for encryption.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.logPrefix">
            <summary>
            Prefix used in logging messages specific to this HTTP client peer.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.client">
            <summary>
            The HTTP client used to send requests and receive responses.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer"/> class.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="initRequest">Initial request containing session and client ID information.</param>
            <param name="tcpClientOptions">Options for configuring the TCP client.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.SendOperation(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Sends an operation request to the server.
            </summary>
            <param name="operationRequestPending">The pending operation request to send.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.Execute(XmobiTea.ProtonNet.Client.Models.OperationRequestPending)">
            <summary>
            Executes the operation request by sending it to the server and processing the response.
            </summary>
            <param name="operationRequestPending">The pending operation request to execute.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.Ping(XmobiTea.ProtonNet.Client.WebApi.OnPingResponse,System.Int32)">
            <summary>
            Sends a ping request to the server to check the connection status.
            </summary>
            <param name="onResponse">Callback method to handle the server's response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the ping request.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.HttpClientClientPeer.GetTs(XmobiTea.ProtonNet.Client.WebApi.OnGetTsResponse,System.Int32)">
            <summary>
            Sends a request to the server to get the current timestamp.
            </summary>
            <param name="onResponse">Callback method to handle the server's timestamp response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the request.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.OnGetTsResponse">
            <summary>
            Delegate for handling timestamp responses from the server.
            </summary>
            <param name="currentMilliseconds">The current time in milliseconds returned by the server.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.OnPingResponse">
            <summary>
            Delegate for handling ping responses from the server.
            </summary>
            <param name="status">The status of the ping request, indicating success or failure.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.OnError">
            <summary>
            Delegate for handling errors during socket operations.
            </summary>
            <param name="error">The socket error encountered.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.IWebApiClientPeer">
            <summary>
            Interface for a Web API client peer, extending the basic client peer functionality
            with additional methods specific to Web API operations.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.IWebApiClientPeer.Ping(XmobiTea.ProtonNet.Client.WebApi.OnPingResponse,System.Int32)">
            <summary>
            Sends a ping request to the server to check the connection status.
            </summary>
            <param name="onResponse">Callback method to handle the server's response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the ping request.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.IWebApiClientPeer.GetTs(XmobiTea.ProtonNet.Client.WebApi.OnGetTsResponse,System.Int32)">
            <summary>
            Sends a request to the server to get the current timestamp.
            </summary>
            <param name="onResponse">Callback method to handle the server's timestamp response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the request.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer">
            <summary>
            Abstract base class for a Web API client peer, implementing common functionality 
            and providing a base for more specific Web API client peer implementations.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.encryptKey">
            <summary>
            Encryption key used for secure communication.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.encryptKeyStr">
            <summary>
            Encryption key as a string, derived from the byte array.
            </summary>
        </member>
        <member name="P:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.networkStatistics">
            <summary>
            Network statistics tracking for the client peer.
            </summary>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.#ctor(System.String,XmobiTea.ProtonNet.Client.Models.IClientPeerInitRequest,XmobiTea.ProtonNetClient.Options.TcpClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer"/> class.
            </summary>
            <param name="serverAddress">The address of the server to connect to.</param>
            <param name="initRequest">Initial request containing session and client ID information.</param>
            <param name="tcpClientOptions">Options for configuring the TCP client.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.GetNetworkStatistics">
            <summary>
            Retrieves network statistics for the client peer.
            </summary>
            <returns>An instance of <see cref="T:XmobiTea.ProtonNetCommon.INetworkStatistics"/> containing network statistics.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.IsConnected">
            <summary>
            Indicates whether the client peer is currently connected.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.GetTs(XmobiTea.ProtonNet.Client.WebApi.OnGetTsResponse,System.Int32)">
            <summary>
            Abstract method to be implemented by derived classes for handling 
            timestamp requests from the server.
            </summary>
            <param name="onResponse">Callback method to handle the server's response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the request.</param>
        </member>
        <member name="M:XmobiTea.ProtonNet.Client.WebApi.AbstractWebApiClientPeer.Ping(XmobiTea.ProtonNet.Client.WebApi.OnPingResponse,System.Int32)">
            <summary>
            Abstract method to be implemented by derived classes for handling 
            ping requests to the server.
            </summary>
            <param name="onResponse">Callback method to handle the server's response.</param>
            <param name="timeoutInSeconds">Timeout period in seconds for the ping request.</param>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderNames">
            <summary>
            Static class containing constant values for HTTP header names 
            used in communication between the client and server.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderNames.ContentType">
            <summary>
            The header name for the content type.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderNames.SessionId">
            <summary>
            The header name for the session ID.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderNames.EncryptKey">
            <summary>
            The header name for the encryption key.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderNames.Token">
            <summary>
            The header name for the authentication token.
            </summary>
        </member>
        <member name="T:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderValues">
            <summary>
            Static class containing constant values for HTTP header fields used in RPC communication.
            </summary>
        </member>
        <member name="F:XmobiTea.ProtonNet.Client.WebApi.Types.HeaderValues.RpcProtocol">
            <summary>
            The value representing the RPC protocol header.
            </summary>
        </member>
    </members>
</doc>
